import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;
import 'package:calendario_familiar/features/calendar/presentation/screens/notification_screen.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:async'; // Importar para Timer
import 'package:calendario_familiar/main.dart';

class AlarmDialog extends StatefulWidget {
  final DateTime selectedDate;
  final String eventText;
  final GlobalKey<NavigatorState> navigatorKey; // Agregar navigatorKey

  const AlarmDialog({
    super.key,
    required this.selectedDate,
    required this.eventText,
    required this.navigatorKey, // Agregar navigatorKey
  });

  @override
  State<AlarmDialog> createState() => _AlarmDialogState();
}

class _AlarmDialogState extends State<AlarmDialog> {
  final FlutterLocalNotificationsPlugin _notifications = FlutterLocalNotificationsPlugin();
  
  bool _alarm1Enabled = false;
  bool _alarm2Enabled = false;
  TimeOfDay _alarm1Time = const TimeOfDay(hour: 9, minute: 0);
  TimeOfDay _alarm2Time = const TimeOfDay(hour: 18, minute: 0);
  int _alarm1DaysBefore = 0;
  int _alarm2DaysBefore = 0;
  String _alarm1Sound = 'Sonido por defecto';
  String _alarm2Sound = 'Sonido por defecto';
  
  bool _hasExistingAlarm1 = false;
  bool _hasExistingAlarm2 = false;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _initializeNotifications();
    _loadExistingAlarms();
  }

  Future<void> _initializeNotifications() async {
    try {
      const AndroidInitializationSettings initializationSettingsAndroid =
          AndroidInitializationSettings('@mipmap/ic_launcher');
      
      const InitializationSettings initializationSettings =
          InitializationSettings(android: initializationSettingsAndroid);
      
      await _notifications.initialize(initializationSettings);
      
      final AndroidNotificationChannel channel = AndroidNotificationChannel(
        'event_reminders',
        'Recordatorios de eventos',
        description: 'Notificaciones para recordar eventos del calendario',
        importance: Importance.high,
        enableVibration: true,
        playSound: true,
      );
      
      await _notifications
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(channel);
          
    } catch (e) {
      print('Error inicializando notificaciones: $e');
    }
  }

  Future<void> _loadExistingAlarms() async {
    try {
      print('üîç Cargando alarmas para: ${widget.selectedDate}');
      final eventDateKey = '${widget.selectedDate.year}${widget.selectedDate.month.toString().padLeft(2, '0')}${widget.selectedDate.day.toString().padLeft(2, '0')}';
      print('üîç Clave de fecha: $eventDateKey');
      
      final alarm1Doc = await FirebaseFirestore.instance
          .collection('alarms')
          .doc('${eventDateKey}_alarm_1')
          .get();
      
      final alarm2Doc = await FirebaseFirestore.instance
          .collection('alarms')
          .doc('${eventDateKey}_alarm_2')
          .get();
      
      print('üîç Alarma 1 existe: ${alarm1Doc.exists}');
      print('üîç Alarma 2 existe: ${alarm2Doc.exists}');
      
      if (alarm1Doc.exists) {
        final alarmData = alarm1Doc.data()!;
        print('üîç Datos alarma 1: $alarmData');
        setState(() {
          _alarm1Enabled = alarmData['enabled'] ?? false;
          _hasExistingAlarm1 = true;
          _alarm1Time = TimeOfDay(
            hour: alarmData['hour'] ?? 9,
            minute: alarmData['minute'] ?? 0,
          );
          _alarm1DaysBefore = alarmData['daysBefore'] ?? 0;
          _alarm1Sound = alarmData['sound'] ?? 'Sonido por defecto';
        });
        print('üîç Alarma 1 cargada: ${_alarm1Time.hour}:${_alarm1Time.minute}');
      }
      
      if (alarm2Doc.exists) {
        final alarmData = alarm2Doc.data()!;
        print('üîç Datos alarma 2: $alarmData');
        setState(() {
          _alarm2Enabled = alarmData['enabled'] ?? false;
          _hasExistingAlarm2 = true;
          _alarm2Time = TimeOfDay(
            hour: alarmData['hour'] ?? 18,
            minute: alarmData['minute'] ?? 0,
          );
          _alarm2DaysBefore = alarmData['daysBefore'] ?? 0;
          _alarm2Sound = alarmData['sound'] ?? 'Sonido por defecto';
        });
        print('üîç Alarma 2 cargada: ${_alarm2Time.hour}:${_alarm2Time.minute}');
      }
      
      setState(() {
        _isLoading = false;
      });
      
    } catch (e) {
      print('‚ùå Error cargando alarmas: $e');
      setState(() {
        _isLoading = false;
      });
      
      // Mostrar mensaje de error m√°s claro
      if (mounted) {
        String errorMessage = 'Error cargando alarmas';
        if (e.toString().contains('permission-denied')) {
          errorMessage = 'Error de permisos en Firebase. Verifica las reglas de Firestore.';
        }
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(errorMessage),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 5),
            action: SnackBarAction(
              label: 'Ver instrucciones',
              textColor: Colors.white,
              onPressed: () {
                // Aqu√≠ podr√≠as mostrar un di√°logo con las instrucciones
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    title: const Text('Error de Permisos'),
                    content: const Text(
                      'Las reglas de Firestore no permiten acceso a la colecci√≥n de alarmas. '
                      'Necesitas actualizar las reglas en la consola de Firebase. '
                      'Revisa el archivo ACTUALIZAR_REGLAS_FIRESTORE.md para las instrucciones.'
                    ),
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.of(context).pop(),
                        child: const Text('Entendido'),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        );
      }
    }
  }

  Future<void> _saveAlarmConfiguration() async {
    try {
      print('üíæ Guardando configuraci√≥n de alarmas en Firebase...');
      
      // Guardar alarma 1 si est√° habilitada
      if (_alarm1Enabled) {
        await _saveSingleAlarmConfiguration(true);
      }
      
      // Guardar alarma 2 si est√° habilitada
      if (_alarm2Enabled) {
        await _saveSingleAlarmConfiguration(false);
      }
      
      print('‚úÖ Configuraci√≥n de alarmas guardada exitosamente');
      
    } catch (e) {
      print('‚ùå Error guardando configuraci√≥n de alarmas: $e');
      rethrow;
    }
  }

  Future<void> _saveSingleAlarmConfiguration(bool isAlarm1) async {
    try {
      final eventDateKey = '${widget.selectedDate.year}${widget.selectedDate.month.toString().padLeft(2, '0')}${widget.selectedDate.day.toString().padLeft(2, '0')}';
      final alarmKey = 'alarm_${isAlarm1 ? "1" : "2"}';
      
      final alarmConfig = {
        'eventDate': eventDateKey,
        'hour': isAlarm1 ? _alarm1Time.hour : _alarm2Time.hour,
        'minute': isAlarm1 ? _alarm1Time.minute : _alarm2Time.minute,
        'daysBefore': isAlarm1 ? _alarm1DaysBefore : _alarm2DaysBefore,
        'sound': isAlarm1 ? _alarm1Sound : _alarm2Sound,
        'enabled': isAlarm1 ? _alarm1Enabled : _alarm2Enabled,
        'eventText': widget.eventText,
        'createdAt': FieldValue.serverTimestamp(),
        'deviceId': 'shared',
      };
      
      print('üíæ Guardando alarma ${isAlarm1 ? "1" : "2"}: $alarmConfig');
      
      await FirebaseFirestore.instance
          .collection('alarms')
          .doc('${eventDateKey}_${alarmKey}')
          .set(alarmConfig);
      
      print('‚úÖ Alarma ${isAlarm1 ? "1" : "2"} guardada exitosamente');
      
    } catch (e) {
      print('‚ùå Error guardando alarma: $e');
      
      // Mostrar mensaje de error m√°s claro
      if (mounted) {
        String errorMessage = 'Error guardando alarma';
        if (e.toString().contains('permission-denied')) {
          errorMessage = 'Error de permisos: No se puede guardar la alarma en Firebase. Verifica las reglas de Firestore.';
        }
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(errorMessage),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 5),
          ),
        );
      }
      
      throw e;
    }
  }

  Future<void> _scheduleNotification(DateTime scheduledDate, String eventText) async {
    try {
      print('üîî Programando alarma simple...');
      
      // Verificar que la fecha no est√© en el pasado
      final now = DateTime.now();
      if (scheduledDate.isBefore(now)) {
        print('‚ö†Ô∏è Fecha en el pasado, ajustando a 10 segundos en el futuro');
        scheduledDate = now.add(const Duration(seconds: 10));
      }
      
      // ID √∫nico para la alarma
      final alarmId = scheduledDate.millisecondsSinceEpoch ~/ 1000;
      
      // Cancelar alarmas anteriores con el mismo ID
      await _notifications.cancel(alarmId);
      
      // Configuraci√≥n b√°sica de notificaci√≥n con fullScreenIntent
      const AndroidNotificationDetails androidPlatformChannelSpecifics =
          AndroidNotificationDetails(
        'event_reminders',
        'Recordatorios de eventos',
        channelDescription: 'Notificaciones para recordar eventos del calendario',
        importance: Importance.high,
        priority: Priority.high,
        enableVibration: true,
        playSound: true,
        showWhen: true,
        fullScreenIntent: true, // Esto hace que aparezca como pantalla completa
        category: AndroidNotificationCategory.alarm,
        timeoutAfter: 60000, // 1 minuto de timeout
        largeIcon: const DrawableResourceAndroidBitmap('@mipmap/ic_launcher'),
        color: const Color(0xFF2196F3), // Color azul
        enableLights: true,
        ledColor: const Color(0xFF2196F3),
        ledOnMs: 1000,
        ledOffMs: 500,
        actions: [
          const AndroidNotificationAction('open_screen', 'üîî Abrir Alarma'),
          const AndroidNotificationAction('dismiss', '‚ùå Descartar'),
        ],
      );

      const NotificationDetails platformChannelSpecifics =
          NotificationDetails(android: androidPlatformChannelSpecifics);

      // Programar notificaci√≥n con zonedSchedule para que funcione en segundo plano
      await _notifications.zonedSchedule(
        alarmId,
        'üîî ¬°Es hora de tu evento!',
        'Evento: $eventText',
        tz.TZDateTime.from(scheduledDate, tz.local),
        platformChannelSpecifics,
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
        payload: 'notification_screen|eventText:$eventText|autoOpen:true',
      );
      
      print('‚úÖ Alarma programada exitosamente:');
      print('   - ID: $alarmId');
      print('   - Para: $scheduledDate');
      print('   - Evento: $eventText');
      print('   - Modo: exactAllowWhileIdle + fullScreenIntent');
      
    } catch (e) {
      print('‚ùå Error programando alarma: $e');
      rethrow;
    }
  }

  // Funci√≥n para abrir la pantalla de notificaci√≥n
  void _openNotificationScreen(String eventText, DateTime eventDate) {
    try {
      if (widget.navigatorKey.currentState != null) {
        widget.navigatorKey.currentState!.push(
          MaterialPageRoute(
            builder: (context) => NotificationScreen(
              eventText: eventText,
              eventDate: eventDate,
            ),
          ),
        );
        print('‚úÖ Pantalla de notificaci√≥n abierta');
      } else {
        print('‚ùå Navigator no disponible');
      }
    } catch (e) {
      print('‚ùå Error abriendo pantalla de notificaci√≥n: $e');
    }
  }

  Future<void> _selectTime(BuildContext context, bool isAlarm1) async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: isAlarm1 ? _alarm1Time : _alarm2Time,
    );
    if (picked != null) {
      setState(() {
        if (isAlarm1) {
          _alarm1Time = picked;
        } else {
          _alarm2Time = picked;
        }
      });
      
      // Guardar en Firebase inmediatamente cuando se cambia la hora
      try {
        await _saveSingleAlarmConfiguration(isAlarm1);
        print('‚úÖ Hora de alarma ${isAlarm1 ? "1" : "2"} actualizada en Firebase');
      } catch (e) {
        print('‚ùå Error guardando hora en Firebase: $e');
      }
    }
  }

  Future<void> _selectDaysBefore(BuildContext context, Function(int) onChanged, int currentValue) async {
    final List<int> options = [0, 1, 2, 3, 7];
    final int? selected = await showDialog<int>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('D√≠as de anticipaci√≥n'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: options.map((days) {
              return ListTile(
                title: Text(days == 0 
                    ? 'Mismo d√≠a' 
                    : days == 1 
                        ? '1 d√≠a antes' 
                        : '$days d√≠as antes'),
                onTap: () => Navigator.of(context).pop(days),
              );
            }).toList(),
          ),
        );
      },
    );
    
    if (selected != null) {
      onChanged(selected);
      
      // Determinar qu√© alarma se est√° modificando
      bool isAlarm1 = selected != _alarm1DaysBefore;
      
      // Guardar en Firebase inmediatamente cuando se cambian los d√≠as
      try {
        await _saveSingleAlarmConfiguration(isAlarm1);
        print('‚úÖ D√≠as de anticipaci√≥n de alarma ${isAlarm1 ? "1" : "2"} actualizados en Firebase');
      } catch (e) {
        print('‚ùå Error guardando d√≠as en Firebase: $e');
      }
    }
  }

  Future<void> _testNotification() async {
    try {
      final AndroidNotificationDetails androidPlatformChannelSpecifics =
          AndroidNotificationDetails(
        'event_reminders',
        'Recordatorios de eventos',
        channelDescription: 'Notificaciones para recordar eventos del calendario',
        importance: Importance.high,
        priority: Priority.high,
        enableVibration: true,
        playSound: true,
        showWhen: true,
      );

      final NotificationDetails platformChannelSpecifics =
          NotificationDetails(android: androidPlatformChannelSpecifics);

      await _notifications.show(
        0,
        'üß™ Notificaci√≥n de prueba',
        'Evento: ${widget.eventText}',
        platformChannelSpecifics,
      );
    } catch (e) {
      print('Error en notificaci√≥n de prueba: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(8),
      ),
      child: Container(
        width: double.maxFinite,
        constraints: BoxConstraints(
          maxHeight: MediaQuery.of(context).size.height * 0.7,
        ),
        padding: const EdgeInsets.all(16),
        child: _isLoading 
            ? const Center(child: CircularProgressIndicator())
            : SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Container(
                      width: double.infinity,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      decoration: BoxDecoration(
                        color: Colors.red,
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: const Text(
                        'ALARMAS',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    
                    const SizedBox(height: 16),
                    
                    _buildAlarmSection(
                      title: 'Alarma de recordatorio de notas 1',
                      enabled: _alarm1Enabled,
                      time: _alarm1Time,
                      daysBefore: _alarm1DaysBefore,
                      sound: _alarm1Sound,
                      hasExistingAlarm: _hasExistingAlarm1,
                      onEnabledChanged: (value) => setState(() => _alarm1Enabled = value!),
                      onTimeChanged: () => _selectTime(context, true),
                      onDaysBeforeChanged: (value) => setState(() => _alarm1DaysBefore = value),
                      onSoundChanged: (value) => setState(() => _alarm1Sound = value),
                    ),
                    
                    const SizedBox(height: 12),
                    
                    _buildAlarmSection(
                      title: 'Alarma de recordatorio de notas 2',
                      enabled: _alarm2Enabled,
                      time: _alarm2Time,
                      daysBefore: _alarm2DaysBefore,
                      sound: _alarm2Sound,
                      hasExistingAlarm: _hasExistingAlarm2,
                      onEnabledChanged: (value) => setState(() => _alarm2Enabled = value!),
                      onTimeChanged: () => _selectTime(context, false),
                      onDaysBeforeChanged: (value) => setState(() => _alarm2DaysBefore = value),
                      onSoundChanged: (value) => setState(() => _alarm2Sound = value),
                    ),
                    
                    const SizedBox(height: 16),
                    
                    // Botones de acci√≥n
                    Row(
                      children: [
                        Expanded(
                          child: Container(
                            height: 40,
                            decoration: BoxDecoration(
                              color: Colors.red,
                              borderRadius: BorderRadius.circular(4),
                            ),
                            child: TextButton(
                              onPressed: () {
                                Navigator.of(context).pop();
                              },
                              child: const Text(
                                'CANCELAR',
                                style: TextStyle(fontSize: 12, fontWeight: FontWeight.bold),
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: Container(
                            height: 40,
                            decoration: BoxDecoration(
                              color: Colors.green,
                              borderRadius: BorderRadius.circular(4),
                            ),
                            child: TextButton(
                              onPressed: () async {
                                try {
                                  await _saveAlarmConfiguration();
                                  Navigator.of(context).pop();
                                } catch (e) {
                                  print('‚ùå Error guardando configuraci√≥n: $e');
                                }
                              },
                              child: const Text(
                                'ACEPTAR',
                                style: TextStyle(fontSize: 12, fontWeight: FontWeight.bold),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
      ),
    );
  }

  Widget _buildAlarmSection({
    required String title,
    required bool enabled,
    required TimeOfDay time,
    required int daysBefore,
    required String sound,
    bool hasExistingAlarm = false,
    required Function(bool?) onEnabledChanged,
    required VoidCallback onTimeChanged,
    required Function(int) onDaysBeforeChanged,
    required Function(String) onSoundChanged,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Checkbox(
              value: enabled,
              onChanged: onEnabledChanged,
              activeColor: Colors.green,
            ),
            Expanded(
              child: Row(
                children: [
                  Expanded(
                    child: Text(
                      title,
                      style: const TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                  if (hasExistingAlarm) ...[
                    const SizedBox(width: 8),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                      decoration: BoxDecoration(
                        color: Colors.blue,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: const Text(
                        'PROGRAMADA',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 10,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ],
              ),
            ),
          ],
        ),
        
        if (enabled) ...[
          const SizedBox(height: 8),
          
          Row(
            children: [
              Expanded(
                child: GestureDetector(
                  onTap: onTimeChanged,
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      border: Border.all(color: Colors.grey[300]!),
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}',
                      style: const TextStyle(fontSize: 12),
                    ),
                  ),
                ),
              ),
              
              const SizedBox(width: 12),
              
              Expanded(
                child: GestureDetector(
                  onTap: () => _selectDaysBefore(context, onDaysBeforeChanged, daysBefore),
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      border: Border.all(color: Colors.grey[300]!),
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Row(
                      children: [
                        Expanded(
                          child: Text(
                            daysBefore == 0 
                                ? 'Mismo d√≠a' 
                                : daysBefore == 1 
                                    ? '1 d√≠a antes' 
                                    : '$daysBefore d√≠as antes',
                            style: const TextStyle(fontSize: 10),
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                        const Icon(Icons.arrow_drop_down, color: Colors.grey, size: 16),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 8),
          
          GestureDetector(
            onTap: () => onSoundChanged('Sonido por defecto'),
            child: Container(
              width: double.infinity,
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border.all(color: Colors.grey[300]!),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Row(
                children: [
                  Expanded(
                    child: Text(
                      sound,
                      style: const TextStyle(fontSize: 12),
                    ),
                  ),
                  const Icon(Icons.music_note, color: Colors.grey, size: 16),
                ],
              ),
            ),
          ),
        ],
      ],
    );
  }
}
