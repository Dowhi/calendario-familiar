import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:calendario_familiar/features/calendar/presentation/screens/calendar_screen.dart';
import 'package:calendario_familiar/features/calendar/presentation/screens/day_detail_screen.dart';
import 'package:calendario_familiar/features/calendar/presentation/screens/year_summary_screen.dart';
import 'package:calendario_familiar/features/calendar/presentation/screens/statistics_screen.dart';
import 'package:calendario_familiar/features/calendar/presentation/screens/notification_screen.dart';
import 'package:calendario_familiar/main.dart';

// Variable global para el navigatorKey
final navigatorKey = GlobalKey<NavigatorState>();

final appRouter = GoRouter(
  navigatorKey: navigatorKey, // Agregar el navigatorKey
  initialLocation: openedFromNotification ? '/notification-screen' : '/',
  redirect: (context, state) {
    if (openedFromNotification && state.fullPath != '/notification-screen') {
      // Resetear la bandera después de redirigir
      openedFromNotification = false;
      return '/notification-screen';
    }
    return null;
  },
  routes: [
    // Ruta principal del calendario
    GoRoute(
      path: '/',
      builder: (context, state) => const CalendarScreen(),
    ),
    
    // Ruta de detalle del día
    GoRoute(
      path: '/day-detail',
      builder: (context, state) {
        final extra = state.extra as Map<String, dynamic>;
        return DayDetailScreen(extraData: extra);
      },
    ),
    
    // Ruta del resumen anual
    GoRoute(
      path: '/year-summary',
      builder: (context, state) {
        final year = state.extra as int? ?? DateTime.now().year;
        return YearSummaryScreen(year: year);
      },
    ),
    
    // Ruta de estadísticas
    GoRoute(
      path: '/statistics',
      builder: (context, state) => const StatisticsScreen(),
    ),
    // Nueva ruta para la pantalla de notificación de alarma
    GoRoute(
      path: '/notification-screen',
      builder: (context, state) {
        final Map<String, dynamic>? extraData = state.extra as Map<String, dynamic>?;
        final String eventText = extraData != null 
            ? extraData['eventText'] as String? ?? pendingEventText 
            : pendingEventText; // Usar global si no viene en extra
        final DateTime eventDate = extraData != null 
            ? extraData['eventDate'] as DateTime? ?? pendingEventDate 
            : pendingEventDate; // Usar global si no viene en extra
        return NotificationScreen(
          eventText: eventText,
          eventDate: eventDate,
        );
      },
    ),
  ],
  errorBuilder: (context, state) => Scaffold(
    body: Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Icon(
            Icons.error_outline,
            size: 64,
            color: Colors.red,
          ),
          const SizedBox(height: 16),
          Text(
            'Error 404',
            style: Theme.of(context).textTheme.headlineMedium,
          ),
          const SizedBox(height: 8),
          Text(
            'Página no encontrada',
            style: Theme.of(context).textTheme.bodyLarge,
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            onPressed: () => context.go('/'),
            child: const Text('Volver al inicio'),
          ),
        ],
      ),
    ),
  ),
);

